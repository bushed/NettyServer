package nettyserver;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Logger;

/**
 * Status DAO (means Data Access Object) that used to work with DB 
 * in all maters related to statistics.
 * Adds request details to DB, reads statistic from DB, etc.
 * @author Gribakin O
 */
public class StatDAO {

    private Logger logger = Logger.getLogger(StatDAO.class.getName());
    final String URL_TYPE = "URL";
    final String IP_TYPE = "IP";
    final String REDIRECT_TYPE = "RE";
    
    /**
     * Seeking a text row in the table and updates the "last used" value
     * If this line is not present, add it.
     * @param uri Record that need to be found.
     * @param type Type specified by table design
     * @return ID value
     */
    private int findURI(String uri, String type){
        ResultSet resultSetFirst = null;
        ResultSet resultSetSecond = null;
        Statement statementFirst = null;
        Statement statementSecond = null;
        int uri_id = 0;
        try {
            resultSetFirst = sendQuery("SELECT URI_ID FROM URI WHERE URI_STRING = '" + uri + "' AND TYPE = '" + type + "'");                        
            if (resultSetFirst.next()){                
                uri_id = resultSetFirst.getInt(1);
                execute("UPDATE URI SET URI_COUNT = URI_COUNT + 1, LAST_USE = CURRENT_TIMESTAMP WHERE URI_ID = " + String.valueOf(uri_id));
            } else {
                execute("INSERT INTO URI (URI_STRING, URI_COUNT, LAST_USE, TYPE) VALUES ('" + uri + "', 1, CURRENT_TIMESTAMP, '" + type + "')");
                resultSetSecond = sendQuery("SELECT URI_ID FROM URI WHERE URI_STRING = '" + uri + "' AND TYPE = '" + type + "'");
                if (resultSetSecond.next()){                
                    uri_id = resultSetSecond.getInt(1);
                }
                statementSecond = resultSetSecond.getStatement();
            }
            statementFirst = resultSetFirst.getStatement();
            
        } catch (SQLException ex) {
            logger.severe(ex.getMessage());
        } finally {
            attemptClose(resultSetFirst);
            attemptClose(resultSetSecond);
            attemptClose(statementFirst);
            attemptClose(statementSecond);
        }        
        return uri_id;
    }
        
    /**
     * Forces the creation of the database if it is empty. 
     */
    public void create(){
        String check = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'URI'";        
        ResultSet resultSet = null;
        try {
            resultSet = sendQuery(check);            
            if (!resultSet.next()){                                
                execute("CREATE TABLE URI(URI_ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, URI_STRING VARCHAR(500), URI_COUNT INTEGER, LAST_USE TIMESTAMP, TYPE VARCHAR(3))");
                execute("CREATE TABLE CONNECTIONS(CONNECTION_id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, src_ip INTEGER,uri_id INTEGER,stamp TIMESTAMP,sent_bytes INTEGER,received_bytes INTEGER,speed INTEGER, REDIRECT_ID INTEGER)");
                execute("CREATE INDEX url_index ON URI (URI_STRING)");
                execute("CREATE INDEX SRC_IP_INDEX ON CONNECTIONS (SRC_IP)");
            } 
        } catch (SQLException ex) {
            logger.severe(ex.getMessage());
        } finally {
            attemptClose(resultSet);
        }        
    }
    
    /**
     * Convert IPv4 text string like '127.0.0.1' into a integer value. 
     * Analog of INET_ATON function in MySQL.
     * @param ip IPv4 String
     * @return Compressed IP adress
     */
    public int inetATON(String ip) {
        final int[] weights = {16777216, 65536, 256, 1};
        String[] octets = ip.split("\\.");
        int result = 0;
        for (int octet = 0; octet < 4; octet++){
            result += Integer.parseInt(octets[octet]) * weights[octet];
        }
        return result;
    }
    
    /**
     * Returns data for table with columns  
     * | IP | Count of requests from this IP | Date of last Request | 
     * @return ResultSet 
     */
    public ResultSet getTableDataByIP(){ 
        StringBuilder query = new StringBuilder();
        query.append("SELECT URI.URI_STRING, SUM(URI.URI_COUNT) AS C, ");
        query.append("TO_CHAR (MAX (URI.LAST_USE), 'YYYY-MM-DD HH24:MI:SS' ) AS STAMP  ");
        query.append("FROM URI WHERE URI.TYPE = '").append(IP_TYPE).append("'");
        query.append("GROUP BY URI_STRING ORDER BY C DESC");    
        return sendQuery(query.toString());
    }
    
    /**
     * Returns data for table with columns  
     * | Redirect URL | Count of redirect to this URL |
     * @return ResultSet 
     */
    public ResultSet getTableDataByRedirect(){
        StringBuilder query = new StringBuilder();
        query.append("SELECT DISTINCT URI_STRING, URI_COUNT AS R ");
        query.append("FROM URI WHERE TYPE = '").append(REDIRECT_TYPE).append("'");
        query.append("ORDER BY R DESC");  
        return sendQuery(query.toString());
    }
    
    /**
     * Returns last 17 requests in a table with columns
     * | src_ip	| URI | timestamp | sent_bytes | received_bytes | speed (bytes/sec) | 
     * @return ResultSet 
     */
    public ResultSet getTableDataLast16(){
        StringBuilder query = new StringBuilder();
        query.append("SELECT CONNECTION_ID, SRC.URI_STRING AS IP, DEST.URI_STRING AS URI, ");
        query.append("STAMP, SENT_BYTES, RECEIVED_BYTES, SPEED ");
        query.append("FROM CONNECTIONS INNER JOIN URI AS DEST ON CONNECTIONS.URI_ID = DEST.URI_ID ");
        query.append("INNER JOIN URI AS SRC ON CONNECTIONS.SRC_IP = SRC.URI_ID ");
        query.append("WHERE CONNECTION_ID > (SELECT MAX(CONNECTION_ID) FROM CONNECTIONS) - 16");
        query.append("ORDER BY CONNECTION_ID DESC");
        return sendQuery(query.toString());        
    }
    
    /**
     * @return count of distinct IP
     */
    public int getCountDistinctIp(){
        ResultSet resultSet = null;
        Statement statement = null;
        int total = 0;
        try {
            resultSet = sendQuery("SELECT COUNT(URI_ID) FROM URI WHERE TYPE = '" + IP_TYPE + "'");            
            if (resultSet.next()){                
                total = resultSet.getInt(1);
            } 
            statement = resultSet.getStatement();
        } catch (SQLException ex) {
            logger.severe(ex.getMessage());
        } finally {
            attemptClose(resultSet);
            attemptClose(statement);
        }        
        return total;        
    }
    
    /**
     * @return Total count of requests
     */
    public int getTotalRequests(){
        ResultSet resultSet = null;
        Statement statement = null;
        int total = 0;
        try {
            resultSet = sendQuery("SELECT MAX(CONNECTION_ID) FROM CONNECTIONS");         
            if (resultSet.next()){                
                total = resultSet.getInt(1);
            } 
            statement = resultSet.getStatement();
        } catch (SQLException ex) {
            logger.severe(ex.getMessage());
        } finally {            
            attemptClose(resultSet);
            attemptClose(statement);
        }        
        return total;
    }
    
    /**
     * Adds a request details in database
     * @param ip Host IP
     * @param uri URI address
     * @param sent_bytes Bytes sent
     * @param received_bytes Bytes received
     * @param speed Total speed of transferred data
     * @param redirect redirect URL
     */
    public void addLogRecord(String ip, String uri, int sent_bytes, int received_bytes, int speed, String redirect){
        String query;                
        uri = uri.replaceAll("'", "\'");        
        int uri_id = findURI(uri, URL_TYPE);
        int src_ip = findURI(ip, IP_TYPE);

        if (null != redirect) {
            redirect = redirect.replaceAll("'", "\'");
            int redirect_id = findURI(redirect, REDIRECT_TYPE);
            query = "INSERT INTO CONNECTIONS (src_ip, uri_id, stamp, sent_bytes, received_bytes, speed, redirect_id) "
                    + "VALUES (%d, %d, (SELECT URI.LAST_USE FROM URI WHERE URI_ID = %d), %d, %d, %d, %d)";
            query = String.format(query, src_ip, uri_id, uri_id, sent_bytes, received_bytes, speed, redirect_id);
        } else {
            query = "INSERT INTO CONNECTIONS (src_ip, uri_id, stamp, sent_bytes, received_bytes, speed) "
                    + "VALUES (%d, %d, (SELECT URI.LAST_USE FROM URI WHERE URI_ID = %d), %d, %d, %d)";
            query = String.format(query, src_ip, uri_id, uri_id, sent_bytes, received_bytes, speed);
        }
        execute(query);
    }
   
    /**
     * Execute specified SQL command in database.
     * @param query SQL query
     * @return Operation result
     */
    private boolean execute(String query) {
        Connection connection = null;
        Statement statement = null;        
        
        try{
            connection = Database.getConnection();                        
            statement = connection.createStatement();
            return statement.execute(query);
        } catch (SQLException ex) {
            logger.severe(ex.getMessage());
        } finally {
            attemptClose(statement);
        }     
        return false;
    }

    /**
     * Send specified SQL query to database and return result.
     * @param query SQL query
     * @return ResultSet
     */
    private ResultSet sendQuery(String query){
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try{
            connection = Database.getConnection();            
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query); 
        } catch (SQLException ex) {
            logger.severe(ex.getMessage());
        } finally {
        }
        return resultSet;
    }
 
    /**
     * Tries to close object. 
     * @param o ResultSet
     */
    static void attemptClose(ResultSet o)
    {
	try
	    { if (o != null) {o.close();} else {
            }}
	catch (Exception e)
	    { e.printStackTrace();
            }
    }

    /**
     * Tries to close object. 
     * @param o Statement
     */
    static void attemptClose(Statement o)
    {
	try
	    { if (o != null) {o.close();} else {
            }}
	catch (Exception e)
	    { e.printStackTrace();}
    }
    
    
}
